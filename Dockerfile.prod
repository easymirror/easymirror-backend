# =============================================================================
# Build phase
# =============================================================================

# Define our base image from the official Golang image
# We specifify the platform because of compatibility issues when Mac Chips
# More info: https://stackoverflow.com/questions/74705475/aws-ecs-exec-usr-local-bin-docker-entrypoint-sh-exec-format-error
FROM --platform=linux/amd64 golang:latest AS builder

# Create and/or change our directory to /build
WORKDIR /build

# Copy go mod & go.sum files so we can verify they haven't been tampered with
COPY go.mod go.sum ./
RUN go mod download && go mod verify

# Copy everything from our root into /app
COPY . .

# Create and/or change our directory to /cmd
WORKDIR /build/cmd

# Define arguments for build revision & create the binary for the app
ARG PKG_PATH
ARG BUILD_TIME
ARG CommitHash
ARG GoVersion
ARG GitTag
ARG VERSION

#  go build -ldflags "-X main.GitCommit=$GIT_COMMIT"

RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags "\
    -X '${PKG_PATH}.appVersion=${VERSION}' \
    -X '${PKG_PATH}.buildTime=${BUILD_TIME}' \
    -X '${PKG_PATH}.commitHash=${CommitHash}' \
    -X '${PKG_PATH}.gitTag=${GitTag}' \
    -X '${PKG_PATH}.goVersion=${GoVersion}'" \
    -o app-binary


# RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o app-binary

# =============================================================================
# Production phase
# =============================================================================

# Start a new stage from scratch so that our final image is way smaller
# We use alpine instead of stratch since we need OS packages
FROM --platform=linux/amd64 alpine:latest

# Create and/or change our directory to /app
WORKDIR /app

# Copy the binary from the build stage to the final stage
COPY --from=builder /build/cmd/app-binary .

# Expose Port
EXPOSE 8080

# Run the app
CMD [ "/app/app-binary"]